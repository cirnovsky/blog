{"version":3,"file":"html-to-ast.cjs.development.js","sources":["../src/element.ts","../src/parse-tag.ts","../src/parse.ts","../src/stringify.ts"],"sourcesContent":["export const htmlVoidElements = [\r\n    'area',\r\n    'base',\r\n    'basefont',\r\n    'bgsound',\r\n    'br',\r\n    'col',\r\n    'command',\r\n    'embed',\r\n    'frame',\r\n    'hr',\r\n    'image',\r\n    'img',\r\n    'input',\r\n    'isindex',\r\n    'keygen',\r\n    'link',\r\n    'menuitem',\r\n    'meta',\r\n    'nextid',\r\n    'param',\r\n    'source',\r\n    'track',\r\n    'wbr'\r\n  ]","import { Comment, IDoc } from './types';\r\nimport { htmlVoidElements } from './element';\r\n\r\nconst attrRE = /\\s([^'\"\\s><=]+)(?:\\s*=\\s*(['\"])([^]*?)\\2)?/g;\r\n// Regular expression for matching and capturing attributes and their values in an HTML tag.\r\n\r\nexport const parseTag = (tag: string): IDoc | Comment => {\r\n  const res: IDoc = {\r\n    type: 'tag',\r\n    name: '',\r\n    voidElement: false,\r\n    attrs: {},\r\n    children: [],\r\n  };\r\n\r\n  const tagMatch = tag.match(/<\\/?([^\\s]+?)[/\\s>]/);\r\n  if (tagMatch) {\r\n    res.name = tagMatch[1];\r\n    res.voidElement =\r\n      htmlVoidElements.includes(tagMatch[1]) ||\r\n      tag.charAt(tag.length - 2) === '/';\r\n\r\n    if (res.name.startsWith('!--')) {\r\n      const endIndex = tag.indexOf('-->');\r\n      return {\r\n        type: 'comment',\r\n        comment: endIndex !== -1 ? tag.slice(4, endIndex) : '',\r\n      };\r\n    }\r\n  }\r\n\r\n  const reg = new RegExp(attrRE);\r\n  let result = null;\r\n  for (;;) {\r\n    result = reg.exec(tag);\r\n\r\n    if (result === null) {\r\n      break;\r\n    }\r\n\r\n    if (!result[0].trim()) {\r\n      continue;\r\n    }\r\n\r\n    const attrName = result[1];\r\n    const attrValue = result[3]; // Capture the attribute value without quotes\r\n\r\n    if (attrName && attrValue !== undefined) {\r\n      res.attrs[attrName] = attrValue;\r\n    }\r\n  }\r\n\r\n  return res;\r\n};","import type { Attr, IOptions } from './types';\r\n\r\nimport { parseTag } from './parse-tag';\r\n\r\nconst tagRE = /<[a-zA-Z0-9\\-\\!\\/](?:\"[^\"]*\"|'[^']*'|[^'\">])*>/g;\r\nconst whitespaceRE = /^\\s*$/;\r\n\r\n// re-used obj for quick lookups of components\r\nconst empty = Object.create(null);\r\n\r\ninterface MaybeDoc {\r\n  type?: string;\r\n  text?: string;\r\n  content?: string;\r\n  voidElement?: boolean;\r\n  name?: string;\r\n  style?: string[];\r\n  attrs?: Attr;\r\n  children?: MaybeDoc[];\r\n  comment?: string;\r\n}\r\n\r\nexport const parse = (html: string, options: Partial<IOptions> = {}) => {\r\n  options || (options = {});\r\n  options.components || (options.components = empty);\r\n  const result: MaybeDoc[] = [];\r\n  const arr: MaybeDoc[] = [];\r\n  let current: MaybeDoc;\r\n  let level = -1;\r\n  let inComponent = false;\r\n\r\n  // handle text at top level\r\n  if (html.indexOf('<') !== 0) {\r\n    var end = html.indexOf('<');\r\n    result.push({\r\n      type: 'text',\r\n      content: end === -1 ? html : html.substring(0, end),\r\n    });\r\n  }\r\n  // @ts-ignore\r\n  html.replace(tagRE, function (tag, index) {\r\n    if (inComponent) {\r\n      if (tag !== '</' + current.name + '>') {\r\n        return '';\r\n      } else {\r\n        inComponent = false;\r\n      }\r\n    }\r\n    const isOpen = tag.charAt(1) !== '/';\r\n    const isComment = tag.startsWith('<!--');\r\n    const start = index + tag.length;\r\n    const nextChar = html.charAt(start);\r\n\r\n    let parent: MaybeDoc | MaybeDoc['children'];\r\n\r\n    if (isComment) {\r\n      const comment = parseTag(tag);\r\n\r\n      // if we're at root, push new base node\r\n      if (level < 0) {\r\n        result.push(comment);\r\n        return result\r\n      }\r\n      parent = arr[level];\r\n      if (parent && parent.children && Array.isArray(parent.children)) {\r\n        parent.children.push(comment);\r\n      }\r\n      return result\r\n    }\r\n\r\n    if (isOpen) {\r\n      level++;\r\n\r\n      current = parseTag(tag);\r\n      if (\r\n        current.type === 'tag' &&\r\n        current.name &&\r\n        options.components &&\r\n        options.components[current.name]\r\n      ) {\r\n        current.type = 'component';\r\n        inComponent = true;\r\n      }\r\n\r\n      if (\r\n        !current.voidElement &&\r\n        !inComponent &&\r\n        nextChar &&\r\n        nextChar !== '<' &&\r\n        Array.isArray(current.children)\r\n      ) {\r\n        current.children.push({\r\n          type: 'text',\r\n          content: html.slice(start, html.indexOf('<', start)),\r\n        });\r\n      }\r\n\r\n      // if we're at root, push new base node\r\n      if (level === 0) {\r\n        result.push(current);\r\n      }\r\n\r\n      parent = arr[level - 1];\r\n\r\n      if (parent && parent.children) {\r\n        parent.children.push(current);\r\n      }\r\n\r\n      arr[level] = current;\r\n    }\r\n\r\n    if (!isOpen || current.voidElement) {\r\n      if (\r\n        level > -1 &&\r\n        (current.voidElement || current.name === tag.slice(2, -1))\r\n      ) {\r\n        level--;\r\n        // move current up a level to match the end tag\r\n        current = level === -1 ? (result as MaybeDoc) : arr[level];\r\n      }\r\n      if (!inComponent && nextChar !== '<' && nextChar) {\r\n        // trailing text node\r\n        // if we're at the root, push a base text node. otherwise add as\r\n        // a child to the current node.\r\n        parent = level === -1 ? result : (arr[level].children as MaybeDoc[]);\r\n\r\n        // calculate correct end of the content slice in case there's\r\n        // no tag after the text node.\r\n        const end = html.indexOf('<', start);\r\n        let content = html.slice(start, end === -1 ? undefined : end);\r\n        // if a node is nothing but whitespace, collapse it as the spec states:\r\n        // https://www.w3.org/TR/html4/struct/text.html#h-9.1\r\n        if (whitespaceRE.test(content)) {\r\n          content = ' ';\r\n        }\r\n        // don't add whitespace-only text nodes if they would be trailing text nodes\r\n        // or if they would be leading whitespace-only text nodes:\r\n        //  * end > -1 indicates this is not a trailing text node\r\n        //  * leading node is when level is -1 and parent has length 0\r\n        if ((end > -1 && level + parent.length >= 0) || content !== ' ') {\r\n          if (parent && Array.isArray(parent)) {\r\n            parent.push({\r\n              type: 'text',\r\n              content: content,\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  return result;\r\n};\r\n","import { Attr, IDoc } from './types';\r\n\r\nfunction attrString(attrs: Attr) {\r\n  const buff = [];\r\n  for (let key in attrs) {\r\n    buff.push(key + '=\"' + attrs[key] + '\"');\r\n  }\r\n  if (!buff.length) {\r\n    return '';\r\n  }\r\n  return ' ' + buff.join(' ');\r\n}\r\n\r\nfunction _stringify(buff: string, doc: IDoc): string {\r\n  switch (doc.type) {\r\n    case 'text':\r\n      return buff + doc.content;\r\n    case 'tag':\r\n      buff +=\r\n        '<' +\r\n        doc.name +\r\n        (doc.attrs ? attrString(doc.attrs) : '') +\r\n        (doc.voidElement ? '/>' : '>');\r\n      if (doc.voidElement) {\r\n        return buff;\r\n      }\r\n      return buff + doc.children.reduce(_stringify, '') + '</' + doc.name + '>';\r\n    case 'comment':\r\n      buff += '<!--' + doc.comment + '-->';\r\n      return buff;\r\n    default:\r\n      return '';\r\n  }\r\n}\r\n\r\nexport const stringify = (doc: IDoc[]) => {\r\n  return doc.reduce(function (token: string, rootEl: IDoc) {\r\n    return token + _stringify('', rootEl);\r\n  }, '');\r\n};\r\n"],"names":["htmlVoidElements","attrRE","parseTag","tag","res","type","name","voidElement","attrs","children","tagMatch","match","includes","charAt","length","startsWith","endIndex","indexOf","comment","slice","reg","RegExp","result","exec","trim","attrName","attrValue","undefined","tagRE","whitespaceRE","empty","Object","create","parse","html","options","components","arr","current","level","inComponent","end","push","content","substring","replace","index","isOpen","isComment","start","nextChar","parent","Array","isArray","test","attrString","buff","key","join","_stringify","doc","reduce","stringify","token","rootEl"],"mappings":";;;;IAAaA,gBAAgB,GAAG,CAC5B,MAAM,EACN,MAAM,EACN,UAAU,EACV,SAAS,EACT,IAAI,EACJ,KAAK,EACL,SAAS,EACT,OAAO,EACP,OAAO,EACP,IAAI,EACJ,OAAO,EACP,KAAK,EACL,OAAO,EACP,SAAS,EACT,QAAQ,EACR,MAAM,EACN,UAAU,EACV,MAAM,EACN,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,OAAO,EACP,KAAK;;ACpBT,IAAMC,MAAM,GAAG,6CAA6C;AAC5D;AAEA,AAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,GAAW;EAClC,IAAMC,GAAG,GAAS;IAChBC,IAAI,EAAE,KAAK;IACXC,IAAI,EAAE,EAAE;IACRC,WAAW,EAAE,KAAK;IAClBC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE;GACX;EAED,IAAMC,QAAQ,GAAGP,GAAG,CAACQ,KAAK,CAAC,qBAAqB,CAAC;EACjD,IAAID,QAAQ,EAAE;IACZN,GAAG,CAACE,IAAI,GAAGI,QAAQ,CAAC,CAAC,CAAC;IACtBN,GAAG,CAACG,WAAW,GACbP,gBAAgB,CAACY,QAAQ,CAACF,QAAQ,CAAC,CAAC,CAAC,CAAC,IACtCP,GAAG,CAACU,MAAM,CAACV,GAAG,CAACW,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG;IAEpC,IAAIV,GAAG,CAACE,IAAI,CAACS,UAAU,CAAC,KAAK,CAAC,EAAE;MAC9B,IAAMC,QAAQ,GAAGb,GAAG,CAACc,OAAO,CAAC,KAAK,CAAC;MACnC,OAAO;QACLZ,IAAI,EAAE,SAAS;QACfa,OAAO,EAAEF,QAAQ,KAAK,CAAC,CAAC,GAAGb,GAAG,CAACgB,KAAK,CAAC,CAAC,EAAEH,QAAQ,CAAC,GAAG;OACrD;;;EAIL,IAAMI,GAAG,GAAG,IAAIC,MAAM,CAACpB,MAAM,CAAC;EAC9B,IAAIqB,MAAM,GAAG,IAAI;EACjB,SAAS;IACPA,MAAM,GAAGF,GAAG,CAACG,IAAI,CAACpB,GAAG,CAAC;IAEtB,IAAImB,MAAM,KAAK,IAAI,EAAE;MACnB;;IAGF,IAAI,CAACA,MAAM,CAAC,CAAC,CAAC,CAACE,IAAI,EAAE,EAAE;MACrB;;IAGF,IAAMC,QAAQ,GAAGH,MAAM,CAAC,CAAC,CAAC;IAC1B,IAAMI,SAAS,GAAGJ,MAAM,CAAC,CAAC,CAAC,CAAC;IAE5B,IAAIG,QAAQ,IAAIC,SAAS,KAAKC,SAAS,EAAE;MACvCvB,GAAG,CAACI,KAAK,CAACiB,QAAQ,CAAC,GAAGC,SAAS;;;EAInC,OAAOtB,GAAG;AACZ,CAAC;;ACjDD,IAAMwB,KAAK,GAAG,iDAAiD;AAC/D,IAAMC,YAAY,GAAG,OAAO;AAE5B;AACA,IAAMC,KAAK,gBAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;AAcjC,IAAaC,KAAK,GAAG,SAARA,KAAKA,CAAIC,IAAY,EAAEC;MAAAA;IAAAA,UAA6B,EAAE;;EACjEA,OAAO,KAAKA,OAAO,GAAG,EAAE,CAAC;EACzBA,OAAO,CAACC,UAAU,KAAKD,OAAO,CAACC,UAAU,GAAGN,KAAK,CAAC;EAClD,IAAMR,MAAM,GAAe,EAAE;EAC7B,IAAMe,GAAG,GAAe,EAAE;EAC1B,IAAIC,OAAiB;EACrB,IAAIC,KAAK,GAAG,CAAC,CAAC;EACd,IAAIC,WAAW,GAAG,KAAK;;EAGvB,IAAIN,IAAI,CAACjB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;IAC3B,IAAIwB,GAAG,GAAGP,IAAI,CAACjB,OAAO,CAAC,GAAG,CAAC;IAC3BK,MAAM,CAACoB,IAAI,CAAC;MACVrC,IAAI,EAAE,MAAM;MACZsC,OAAO,EAAEF,GAAG,KAAK,CAAC,CAAC,GAAGP,IAAI,GAAGA,IAAI,CAACU,SAAS,CAAC,CAAC,EAAEH,GAAG;KACnD,CAAC;;;EAGJP,IAAI,CAACW,OAAO,CAACjB,KAAK,EAAE,UAAUzB,GAAG,EAAE2C,KAAK;IACtC,IAAIN,WAAW,EAAE;MACf,IAAIrC,GAAG,KAAK,IAAI,GAAGmC,OAAO,CAAChC,IAAI,GAAG,GAAG,EAAE;QACrC,OAAO,EAAE;OACV,MAAM;QACLkC,WAAW,GAAG,KAAK;;;IAGvB,IAAMO,MAAM,GAAG5C,GAAG,CAACU,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG;IACpC,IAAMmC,SAAS,GAAG7C,GAAG,CAACY,UAAU,CAAC,MAAM,CAAC;IACxC,IAAMkC,KAAK,GAAGH,KAAK,GAAG3C,GAAG,CAACW,MAAM;IAChC,IAAMoC,QAAQ,GAAGhB,IAAI,CAACrB,MAAM,CAACoC,KAAK,CAAC;IAEnC,IAAIE,MAAuC;IAE3C,IAAIH,SAAS,EAAE;MACb,IAAM9B,OAAO,GAAGhB,QAAQ,CAACC,GAAG,CAAC;;MAG7B,IAAIoC,KAAK,GAAG,CAAC,EAAE;QACbjB,MAAM,CAACoB,IAAI,CAACxB,OAAO,CAAC;QACpB,OAAOI,MAAM;;MAEf6B,MAAM,GAAGd,GAAG,CAACE,KAAK,CAAC;MACnB,IAAIY,MAAM,IAAIA,MAAM,CAAC1C,QAAQ,IAAI2C,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC1C,QAAQ,CAAC,EAAE;QAC/D0C,MAAM,CAAC1C,QAAQ,CAACiC,IAAI,CAACxB,OAAO,CAAC;;MAE/B,OAAOI,MAAM;;IAGf,IAAIyB,MAAM,EAAE;MACVR,KAAK,EAAE;MAEPD,OAAO,GAAGpC,QAAQ,CAACC,GAAG,CAAC;MACvB,IACEmC,OAAO,CAACjC,IAAI,KAAK,KAAK,IACtBiC,OAAO,CAAChC,IAAI,IACZ6B,OAAO,CAACC,UAAU,IAClBD,OAAO,CAACC,UAAU,CAACE,OAAO,CAAChC,IAAI,CAAC,EAChC;QACAgC,OAAO,CAACjC,IAAI,GAAG,WAAW;QAC1BmC,WAAW,GAAG,IAAI;;MAGpB,IACE,CAACF,OAAO,CAAC/B,WAAW,IACpB,CAACiC,WAAW,IACZU,QAAQ,IACRA,QAAQ,KAAK,GAAG,IAChBE,KAAK,CAACC,OAAO,CAACf,OAAO,CAAC7B,QAAQ,CAAC,EAC/B;QACA6B,OAAO,CAAC7B,QAAQ,CAACiC,IAAI,CAAC;UACpBrC,IAAI,EAAE,MAAM;UACZsC,OAAO,EAAET,IAAI,CAACf,KAAK,CAAC8B,KAAK,EAAEf,IAAI,CAACjB,OAAO,CAAC,GAAG,EAAEgC,KAAK,CAAC;SACpD,CAAC;;;MAIJ,IAAIV,KAAK,KAAK,CAAC,EAAE;QACfjB,MAAM,CAACoB,IAAI,CAACJ,OAAO,CAAC;;MAGtBa,MAAM,GAAGd,GAAG,CAACE,KAAK,GAAG,CAAC,CAAC;MAEvB,IAAIY,MAAM,IAAIA,MAAM,CAAC1C,QAAQ,EAAE;QAC7B0C,MAAM,CAAC1C,QAAQ,CAACiC,IAAI,CAACJ,OAAO,CAAC;;MAG/BD,GAAG,CAACE,KAAK,CAAC,GAAGD,OAAO;;IAGtB,IAAI,CAACS,MAAM,IAAIT,OAAO,CAAC/B,WAAW,EAAE;MAClC,IACEgC,KAAK,GAAG,CAAC,CAAC,KACTD,OAAO,CAAC/B,WAAW,IAAI+B,OAAO,CAAChC,IAAI,KAAKH,GAAG,CAACgB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAC1D;QACAoB,KAAK,EAAE;;QAEPD,OAAO,GAAGC,KAAK,KAAK,CAAC,CAAC,GAAIjB,MAAmB,GAAGe,GAAG,CAACE,KAAK,CAAC;;MAE5D,IAAI,CAACC,WAAW,IAAIU,QAAQ,KAAK,GAAG,IAAIA,QAAQ,EAAE;;;;QAIhDC,MAAM,GAAGZ,KAAK,KAAK,CAAC,CAAC,GAAGjB,MAAM,GAAIe,GAAG,CAACE,KAAK,CAAC,CAAC9B,QAAuB;;;QAIpE,IAAMgC,IAAG,GAAGP,IAAI,CAACjB,OAAO,CAAC,GAAG,EAAEgC,KAAK,CAAC;QACpC,IAAIN,OAAO,GAAGT,IAAI,CAACf,KAAK,CAAC8B,KAAK,EAAER,IAAG,KAAK,CAAC,CAAC,GAAGd,SAAS,GAAGc,IAAG,CAAC;;;QAG7D,IAAIZ,YAAY,CAACyB,IAAI,CAACX,OAAO,CAAC,EAAE;UAC9BA,OAAO,GAAG,GAAG;;;;;;QAMf,IAAKF,IAAG,GAAG,CAAC,CAAC,IAAIF,KAAK,GAAGY,MAAM,CAACrC,MAAM,IAAI,CAAC,IAAK6B,OAAO,KAAK,GAAG,EAAE;UAC/D,IAAIQ,MAAM,IAAIC,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,EAAE;YACnCA,MAAM,CAACT,IAAI,CAAC;cACVrC,IAAI,EAAE,MAAM;cACZsC,OAAO,EAAEA;aACV,CAAC;;;;;GAKX,CAAC;EAEF,OAAOrB,MAAM;AACf,CAAC;;ACtJD,SAASiC,UAAUA,CAAC/C,KAAW;EAC7B,IAAMgD,IAAI,GAAG,EAAE;EACf,KAAK,IAAIC,GAAG,IAAIjD,KAAK,EAAE;IACrBgD,IAAI,CAACd,IAAI,CAACe,GAAG,GAAG,IAAI,GAAGjD,KAAK,CAACiD,GAAG,CAAC,GAAG,GAAG,CAAC;;EAE1C,IAAI,CAACD,IAAI,CAAC1C,MAAM,EAAE;IAChB,OAAO,EAAE;;EAEX,OAAO,GAAG,GAAG0C,IAAI,CAACE,IAAI,CAAC,GAAG,CAAC;AAC7B;AAEA,SAASC,UAAUA,CAACH,IAAY,EAAEI,GAAS;EACzC,QAAQA,GAAG,CAACvD,IAAI;IACd,KAAK,MAAM;MACT,OAAOmD,IAAI,GAAGI,GAAG,CAACjB,OAAO;IAC3B,KAAK,KAAK;MACRa,IAAI,IACF,GAAG,GACHI,GAAG,CAACtD,IAAI,IACPsD,GAAG,CAACpD,KAAK,GAAG+C,UAAU,CAACK,GAAG,CAACpD,KAAK,CAAC,GAAG,EAAE,CAAC,IACvCoD,GAAG,CAACrD,WAAW,GAAG,IAAI,GAAG,GAAG,CAAC;MAChC,IAAIqD,GAAG,CAACrD,WAAW,EAAE;QACnB,OAAOiD,IAAI;;MAEb,OAAOA,IAAI,GAAGI,GAAG,CAACnD,QAAQ,CAACoD,MAAM,CAACF,UAAU,EAAE,EAAE,CAAC,GAAG,IAAI,GAAGC,GAAG,CAACtD,IAAI,GAAG,GAAG;IAC3E,KAAK,SAAS;MACZkD,IAAI,IAAI,MAAM,GAAGI,GAAG,CAAC1C,OAAO,GAAG,KAAK;MACpC,OAAOsC,IAAI;IACb;MACE,OAAO,EAAE;;AAEf;AAEA,IAAaM,SAAS,GAAG,SAAZA,SAASA,CAAIF,GAAW;EACnC,OAAOA,GAAG,CAACC,MAAM,CAAC,UAAUE,KAAa,EAAEC,MAAY;IACrD,OAAOD,KAAK,GAAGJ,UAAU,CAAC,EAAE,EAAEK,MAAM,CAAC;GACtC,EAAE,EAAE,CAAC;AACR,CAAC;;;;;;"}